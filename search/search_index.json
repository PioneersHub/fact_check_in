{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fact Check-in","text":"<p>REST API to validate conference attendees using multiple ticketing systems through a modular backend architecture.</p>"},{"location":"#supported-ticketing-systems","title":"Supported Ticketing Systems","text":"<ul> <li>Tito - Default backend with native activity support</li> <li>Pretix - Full integration with category-based attribute mapping</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#build-in-attributes","title":"Build-In <code>attributes</code>","text":"<p>The following attributes are built-in and default toi <code>False</code>:</p> <ul> <li>is_onsite</li> <li>is_remote</li> <li>online_access</li> <li>is_speaker</li> <li>is_sponsor</li> <li>is_volunteer</li> <li>is_organizer</li> <li>is_guest</li> </ul>"},{"location":"#prep-setup-ticketing-in-pretix","title":"Prep: Setup Ticketing in Pretix","text":"<p>It's important to follow a base structure when setting up the tickets in pretix already.</p> <p>Roles can bes assigned via:</p>"},{"location":"#1-ticket-categories","title":"1. Ticket Categories","text":"<p>\"Product categories\" in Pretix</p> <p>The category defines on-site and remote access baseline (e.g. attributes: is_remote, is_onsite, online_access)</p>"},{"location":"#2-tickets-incl-variations","title":"2. Tickets (incl. Variations)","text":"<p>\"Products\" in Pretix</p> <p>This will update the attributes set in 1.</p> <p>A usual use case is to add is_speaker for speaker tickets for example.</p>"},{"location":"#3-order-id","title":"3. Order ID","text":"<p>'ABCDE-1', \"Orders\" in Pretix, note one order can have multiple items 'ABCDE-1, 'ABCDE-2',\u2026</p> <p>This will update the attributes set in 1. and 2.</p> <p>This is mostly used to handle multiple roles if a person is:</p> <ul> <li>organizer_and_speaker: The person is an organizer and gives a talk.</li> <li>organizer_and_sponsor: The person is an organizer and the employer is also sponsor.</li> <li>speaker_and_sponsor: The person is a speaker and the employer is also sponsor.</li> <li>speaker_add_keynote: The person is a keynote speaker.</li> <li>add_speaker: The person is a speaker but has a non-speaker ticket for some reason.</li> </ul> <p>This is a direct assignment for that one ticket for that one person</p>"},{"location":"#access-rights-assignment","title":"Access rights Assignment","text":"<p>Access rights are assigned in the following order:</p> <ol> <li>Ticket category</li> <li>Ticket ID</li> <li>Order ID</li> </ol> <p>Any step might change attributes. The best practice is to only add access, i,e. setting attributes to True. A mix of adding and removing access will be confusing.</p>"},{"location":"#pitfalls","title":"Pitfalls","text":""},{"location":"#use-case-social-event","title":"Use case: Social Event","text":"<p>You grant all ticket holders access to remote attendance <code>online_access: True</code>. But there are also social event tickets available for a +1, social event tickets does not include <code>online_access</code></p> <ul> <li>put event tickets in own category, e.,g. Social Event</li> </ul> <pre><code>pretix_mapping:\n  categories:\n    by_id:\n      999: # ID of social event category\n        online_access: False\n    # OR exclude one or multiple ticket IDs\n    by_ticket_id:\n      8888: # ID of social event ticket\n        online_access: False\n</code></pre>"},{"location":"#change-of-category","title":"\u26a0\ufe0f: Change of Category","text":"<p>The category can very easily be changed in the Pretix backend. Other people might do that to:</p> <ul> <li>get a nicer look on the stats</li> <li>improve the ticket shop order.</li> </ul>"},{"location":"#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code># Requires Python 3.12+\nuv pip install -e .\n</code></pre>"},{"location":"#2-configure-ticketing-system","title":"2. Configure Ticketing System","text":"<p>Option A: Tito (Default)</p> <pre><code># Create .env file\nTITO_TOKEN=\"your_secret_token\"\nACCOUNT_SLUG=\"account_slug_from_tito\"\nEVENT_SLUG=\"event_slug_from_tito\"\n</code></pre> <p>Option B: Pretix</p> <pre><code># Create .env file\nPRETIX_TOKEN=\"your_pretix_api_token\"\nPRETIX_BASE_URL=\"https://pretix.eu/api/v1\"\nPRETIX_ORGANIZER_SLUG=\"your_organizer_slug\"\nPRETIX_EVENT_SLUG=\"your_event_slug\"\n\n# Set backend (environment variable takes precedence over config file)\nTICKETING_BACKEND=pretix\n</code></pre>"},{"location":"#3-configure-event-mapping-pretix-only","title":"3. Configure Event Mapping (Pretix only)","text":"<p>Edit <code>event_config.yml</code> to map your event's ticket categories and special roles:</p> <pre><code># Set backend\nTICKETING_BACKEND: pretix\n\npretix_mapping:\n  categories:\n    by_id:\n      227668: # Your category ID\n        is_onsite: true\n        online_access: true\n\n    by_ticket_id:\n      819314: # Speaker ticket ID\n        is_speaker: true\n\n  # Special multi-role assignments\n  speaker_and_sponsor:\n    - \"C3UAP-1\"  # Ticket code\n</code></pre>"},{"location":"#4-run-the-application","title":"4. Run the Application","text":"<p>Option A: Direct Run</p> <pre><code># IMPORTANT: Use single worker only!\nuvicorn app.main:app --port 8080 --host \"0.0.0.0\"\n</code></pre> <p>Option B: Docker</p> <pre><code># Set environment variables in .env file or export them\nexport TITO_TOKEN=\"your_token\"\nexport ACCOUNT_SLUG=\"your_account\"\nexport EVENT_SLUG=\"your_event\"\n\n# Build and run\ndocker-compose up --build\n\n# Or run pre-built image\ndocker-compose up\n</code></pre> <p>Note: Startup takes ~30 seconds while loading ticket data.</p> <p>API Documentation: Once running, visit:</p> <ul> <li>Interactive API docs: http://localhost:8080/docs</li> <li>ReDoc: http://localhost:8080/redoc</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Modular Backend Architecture: Easily switch between ticketing systems or add new ones</li> <li>Dynamic Configuration: Backend selection via environment variables or config files</li> <li>Smart Validation:<ul> <li>Validate attendees by ticket code + name (with fuzzy matching)</li> <li>Validate attendees by email</li> <li>Configurable name matching thresholds</li> </ul> </li> <li>Flexible Attribute Mapping:<ul> <li>Tito: Native activity support</li> <li>Pretix: Category and product name-based mapping</li> </ul> </li> <li>Special Attendee Types: Automatic detection of speakers, sponsors, volunteers, organizers</li> <li>Access Level Detection: Distinguish between on-site, remote, and online attendees</li> <li>Day Pass Support: Handle day-specific access (Monday, Tuesday, etc.)</li> </ul>"},{"location":"#backend-architecture","title":"Backend Architecture","text":"<p>The application uses a modular backend system that allows seamless switching between different ticketing platforms:</p> <ul> <li>Abstract Interface: <code>TicketingBackend</code> base class defines the contract</li> <li>Dynamic Loading: Backends are loaded at runtime based on configuration</li> <li>Consistent API: Same REST endpoints work with any backend</li> <li>Easy Extension: Add new backends by implementing the interface</li> </ul>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>POST /tickets/validate_name/</code> - Validate by ticket ID and name</li> <li><code>POST /tickets/validate_email/</code> - Validate by email</li> <li><code>GET /tickets/refresh_all/</code> - Force reload ticket data</li> <li><code>GET /healthcheck/alive</code> - Health check</li> </ul>"},{"location":"#development","title":"Development","text":"<pre><code># Install with dev dependencies\nuv pip install -e .\n\n# Set up pre-commit hooks\npre-commit install --hook-type pre-commit --hook-type pre-push\n\n# Run tests\npytest\n\n# Run linting/formatting\nruff check . --fix\nruff format .\n</code></pre>"},{"location":"#agentic-api","title":"Agentic API","text":"<p>This project was partially updated with Claude CLI. Instructions for Claude are in CLAUDE.md</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Developer Guide - Development setup and guidelines</li> <li>API Documentation - Interactive API docs (when running)</li> </ul>"},{"location":"#other","title":"Other","text":"<p>There are issues of the library that created the social cards on macOS, the cairo svg library is required: <code>brew install cairo</code>. Even if installed cairo might not be found. Fixes:</p> <ul> <li><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib</code></li> <li>Add a symlink in project root: <code>ln -s /opt/homebrew/opt/cairo/lib/libcairo.2.dylib</code></li> </ul>"}]}